plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.5'
	// (1) asciidoctor에 대한 플러그인을 추가해준다.
	// 이 플러그인은 adoc 파일을 변환하고 build 디렉토리에 복사하기 위해 사용하는 플러그인이다.
	// gradle 7 부터는 이전에 사용하던 org.asciidoctor.convert 대신 asciidoctor.jvm.convert를 사용해야 한다.
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'jacoco'	// Jacoco: 테스트 코드 커버리지를 분석해주는 자바의 무료 라이브러리
}

group = 'com.ticketingberry'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
	gradlePluginPortal()
}

configurations {
	asciidoctorExt	// (2) asciidoctorExt을 Configuration에 지정해준다.
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.googlecode.libphonenumber:libphonenumber:8.13.27'
    implementation 'org.springframework:spring-context-support'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	// (3) dependencies에 spring-restdocs-asciidoctor를 추가해준다.
	// adoc 파일에서 사용할 snippets 속성이 자동으로 build/generated-snippets를 가리키도록 해준다.
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'	
	// (4) MockMvc를 사용하여 테스트할 예정이기 때문에 spring-resetdocs-mockmvc도 dependencies에 추가해준다.
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.mockito:mockito-core:4.0.0'
	// Actuator를 사용하여 애플리케이션의 다양한 상태 정보와 메트릭을 노출
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
}

ext {
	snippetsDir = file('build/generated-snippets')	// (5) snippets 파일이 저장될 경로를 설정해준다.
}

tasks.named('test') {
	useJUnitPlatform()
	outputs.dir snippetsDir		// (6) 출력할 디렉토리는 설정해준다.
}

asciidoctor { 
	// (7) asciidoctor에서 asciidoctorExt을 configurations로 사용하도록 설정한다. 
    configurations 'asciidoctorExt'	
    // (8) .adoc 파일에서는 다른 .adoc 파일을 include하여 사용할 수 있는데 그럴 경우 경로를 동일하게 baseDir로 설정해준다.
    // Gradle 6 버전에서는 자동으로 해주지만 7부터는 직접 명시해줘야 한다.
    baseDirFollowsSourceFile()
    // (9) input 디렉토리를 설정해준다.
    inputs.dir snippetsDir
    // (10) build시 test 후 asciidoctor를 진행하도록 설정해준다. (순서 설정)			
    dependsOn test
}

asciidoctor.doFirst {
	// (11) 중복을 막기 위해 새로운 문서를 생성할 때에는 전에 생성했던 문서들을 먼저 지워준다.
    delete file('src/main/resources/static/docs')	
}

// (12) build/docs/asciidoc 디렉토리에 생성된 html 문서를 src/main/resources/static/docs 디렉토리에 복사해온다.
task copyDocument(type: Copy) { 	
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

// (13) copyDocument 후 build 지정
build {
    dependsOn copyDocument
}

jacoco {
	toolVersion = "0.8.10" // https://www.jacoco.org/jacoco/trunk/doc/changes.html
}

// 커버리지 결과를 리포트로 저장하는 역할
jacocoTestReport {
	dependsOn test
	reports {
		html.required = true
		xml.required = true
	}
	
	// QueryDSL QDomain 제외시키기
	def QDomains = []
	
	for (qPattern in '**/QA'..'**/QZ') {
        QDomains.add(qPattern + '*')
    }
    
    afterEvaluate {
    	classDirectories.setFrom(
    		// 그 외의 매칭되는 클래스도 제외 대상
            files(classDirectories.files.collect {
                fileTree(dir: it, excludes: [
                        "com.ticketingberry.TicketingPracticeApplication*",
                        "**/*Config*",
                        "**/exception/custom/*"
                ] + QDomains)
            })
        )
    }
    
    // test 실행 이후 리포트 생성 후 커버리지 체크
    // finalizedBy는 A task의 성공과 실패에 상관없이 A가 끝나야 B가 실행
    // 성공해야 실행되도록 하려면 dependsOn 사용
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	// QueryDSL QDomain 제외시키기
	def QDomains = []
	// qPattern = "*.QA","*.QB","*.QC", ... "*.QZ"
    for (qPattern in '*.QA'..'*.QZ') {
        QDomains.add(qPattern + '*')
    }
	
	violationRules {
		rule {
			// rule 활성화
			enabled = true
			
			// element: 커버리지를 체크할 기준
			// 클래스 단위로 커버리지 체크
			element = 'CLASS'
			
			// 라인 커버리지를 최소 80% 만족
			limit {
				// counter: 커버리지 측정을 위한 최소 단위
				// LINE: 빈 줄을 제외한 실제 코드의 라인 수. 라인이 한번이라도 실행되었다면 실행된 것으로 간주
				counter = 'LINE'	
				// value: 측정한 커버리지를 어떠한 방식으로 보여줄 것인가
				// COVEREDRATIO: 커버된 비율. 0 ~ 1 사이의 수로 1이 100% (기본값)
				value = 'COVEREDRATIO'
				// minumum: counter 값을 value에 맞게 표현하였을 때의 최솟값
				// 이를 통해 커버리지 판단의 성공 여부가 결정
				minimum = 0.80
			}
			
			// excludes: 커버리지 측정 시 제외할 클래스 지정
			// 패키지 레벨의 경로로 지정. 경로에는 *와 ? 사용
			excludes = [
                "com.ticketingberry.TicketingPracticeApplication*",
                "**/*Config*",
                "**/exception/custom/*"
			] + QDomains
		}
	}
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
	// test 수행 이후 리포트 생성
	finalizedBy jacocoTestReport
}

// Test 실행의 경우 ./gradlew test, ./gradlew clean build로 실행 가능